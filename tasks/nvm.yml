- name: install nvm dependencies
  become: true
  apt: pkg={{ item }}
  with_items:
    - git
    - curl
    - build-essential
    - libssl-dev

- name: check if nvm installed
  become: true
  become_user: "{{ server_user_name }}"
  stat: path=~/.nvm
  register: nvm_path
  changed_when: False

- name: install nvm
  become: true
  become_user: "{{ server_user_name }}"
  git: repo=https://github.com/creationix/nvm.git dest=~/.nvm version={{ nvm_version }}
  when: not nvm_path.stat.exists
  tags: nvm

- name: source nvm in ~/.profile
  become: true
  become_user: "{{ server_user_name }}"
  lineinfile: >
    dest=~/.profile
    line="source ~/.nvm/nvm.sh"
  tags: nvm

- name: check installed node version
  become: true
  become_user: "{{ server_user_name }}"
  command: bash -c '. ~/.nvm/nvm.sh; nvm ls'
  register: nvm_install_result
  changed_when: False
  ignore_errors: True

- name: install nodejs using nvm
  become: true
  become_user: "{{ server_user_name }}"
  command: bash -c '. ~/.nvm/nvm.sh; nvm install {{ nvm_node_version }}'
  when: nvm_install_result|failed or nvm_install_result.stdout.find('{{ nvm_node_version }}') == -1
  tags: nvm

- name: check the default nodejs version
  become: true
  become_user: "{{ server_user_name }}"
  command: bash -c '. ~/.nvm/nvm.sh; nvm ls | grep -e "default -> {{ nvm_node_version }}"'
  register: nvm_check_default
  changed_when: False
  ignore_errors: True
  tags: nvm

- name: set default node version
  become: true
  become_user: "{{ server_user_name }}"
  command: bash -c '. ~/.nvm/nvm.sh; nvm alias default {{ nvm_node_version }}'
  when: nvm_check_default|failed
  tags: nvm

- name: install global packages
  shell: bash -lc "nvm use {{ item.0 }} && npm install -g {{ item.1 }}"
  become: true
  become_user: "{{ server_user_name }}"
  with_nested:
    - "{{ nvm_node_version }}"
    - "{{ nvm_global_packages }}"